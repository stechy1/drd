package cz.stechy.drd.controller;

import cz.stechy.drd.model.entity.Vulnerabilities;
import cz.stechy.drd.model.entity.Vulnerabilities.VulnerabilityType;
import cz.stechy.drd.util.StringConvertors;
import cz.stechy.drd.util.Translator;
import cz.stechy.screens.BaseController;
import cz.stechy.screens.Bundle;
import java.net.URL;
import java.util.Arrays;
import java.util.ResourceBundle;
import javafx.beans.property.IntegerProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.geometry.Insets;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ComboBox;
import javafx.scene.layout.FlowPane;

/**
 * Kontroler pro nastavení zranitelnosti nestvůry / postavy
 */
public class VulnerabilityController extends BaseController implements Initializable {

    // region Constants

    public static final String VULNERABILITY = "vulnerability";

    // endregion

    // region Variables

    // region FXML

    @FXML
    private ComboBox<VulnerabilityType> cmbVulnerabilities;
    @FXML
    private FlowPane container;

    // endregion

    private final IntegerProperty vulnerability = new SimpleIntegerProperty();
    private final Translator translator;
    private final VulnerabilityCheckbox[] checkboxes;

    private boolean changing = false;
    //private int vulnerability = 0;

    // endregion

    // region Constructors

    public VulnerabilityController(Translator translator) {
        this.translator = translator;
        this.checkboxes = Vulnerabilities.VALUES.entrySet().stream()
            .map(entry -> new VulnerabilityCheckbox(entry.getKey(), entry.getValue()))
            .toArray(VulnerabilityCheckbox[]::new);
    }

    // endregion

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        container.getChildren().setAll(checkboxes);
        Arrays.stream(this.checkboxes).forEach(checkbox -> checkbox.setOnAction(checkboxHandler));
        vulnerability.addListener((observable, oldValue, newValue) -> {
            if (changing) {
                return;
            }
            changing = true;
            Arrays.stream(checkboxes).forEach(checkbox -> checkbox.tryCheck(newValue.intValue()));
            changing = false;
        });
        cmbVulnerabilities.converterProperty().setValue(
            StringConvertors.forVulnerabilities(translator));
        cmbVulnerabilities.getSelectionModel().selectedItemProperty().addListener((observable, oldValue, newValue) ->
            vulnerability.setValue(newValue.getVulnerability()));
        cmbVulnerabilities.getSelectionModel().select(VulnerabilityType.CUSTOM);
    }

    @Override
    protected void onCreate(Bundle bundle) {
        this.vulnerability.set(bundle.getInt(VULNERABILITY));
    }

    @Override
    protected void onResume() {
        setScreenSize(200, 170);
    }

    // region Button handlers

    @FXML
    private void handleFinish(ActionEvent actionEvent) {
        Bundle bundle = new Bundle();
        bundle.putInt(VULNERABILITY, vulnerability.get());
        setResult(RESULT_SUCCESS);
        finish(bundle);
    }

    // endregion

    private static final class VulnerabilityCheckbox extends CheckBox {

        private final int value;

        public VulnerabilityCheckbox(final String label, final int value) {
            this.value = value;
            setText(label);
            setPadding(new Insets(2.0));
        }

        public void tryCheck(int value) {
            setSelected((this.value & value) == this.value);
        }
    }

    private final EventHandler<ActionEvent> checkboxHandler = event -> {
        if (changing) {
            return;
        }

        changing = true;
        VulnerabilityCheckbox checkbox = ((VulnerabilityCheckbox) event.getSource());
        if (checkbox.isSelected()) {
            //vulnerability += checkbox.value;
            vulnerability.set(vulnerability.get() + checkbox.value);
        } else {
            //vulnerability -= checkbox.value;
            vulnerability.set(vulnerability.get() - checkbox.value);
        }
        changing = false;
    };
}
